
<button id="theme-toggle" class=" rounded-full bg-background  focus:outline-none  group">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sun hidden dark:block group-hover:text-accent transition-colors">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-moon block dark:hidden group-hover:text-accent transition-colors">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<script>
const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

declare const Prism: any;

function initThemeToggle() {
  const themeToggleBtn = document.getElementById('theme-toggle');

  const savedTheme = localStorage.getItem('theme');
  let isDarkMode = savedTheme === 'dark' ||
                  (savedTheme === null && darkModeMediaQuery.matches);

  updateTheme(isDarkMode);

  function updateTheme(isDark: boolean) {
    document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');

    if (isDark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    localStorage.setItem('theme', isDark ? 'dark' : 'light');

    setTimeout(() => {
      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    }, 100);
  }

  themeToggleBtn?.addEventListener('click', () => {
    isDarkMode = !isDarkMode;
    updateTheme(isDarkMode);
  });

  darkModeMediaQuery.addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      updateTheme(e.matches);
      isDarkMode = e.matches;
    }
  });
}

document.addEventListener('DOMContentLoaded', initThemeToggle);
document.addEventListener('astro:page-load', initThemeToggle);
document.addEventListener('astro:after-swap', () => {
  const savedTheme = localStorage.getItem('theme');
  const isDarkMode = savedTheme === 'dark' ||
                   (savedTheme === null && darkModeMediaQuery.matches);

  if (isDarkMode) {
    document.documentElement.classList.add('dark');
    document.documentElement.setAttribute('data-theme', 'dark');
  } else {
    document.documentElement.classList.remove('dark');
    document.documentElement.setAttribute('data-theme', 'light');
  }
});
</script>
